const { supabase } = require('../supabase.config');

describe('Edge Function - create-and-invite-user', () => {
  
  const usuarios = {
    normal: {
      email: process.env.TEST_USER_EMAIL,
      password: process.env.TEST_USER_PASSWORD
    },
    analista: {
      email: process.env.ANALYST_USER_EMAIL,
      password: process.env.ANALYST_USER_PASSWORD
    },
    jefeSeguridad: {
      email: process.env.SECURITY_CHIEF_EMAIL,
      password: process.env.SECURITY_CHIEF_PASSWORD
    }
  };

  let usuarioNormalId = null;
  let analistaId = null;
  let jefeId = null;

  beforeAll(async () => {
    console.log('=== Configurando usuarios para pruebas de Edge Function ===');
    
    const { data: normalData } = await supabase.auth.signInWithPassword(usuarios.normal);
    usuarioNormalId = normalData.user.id;
    await supabase.auth.signOut();
    
    const { data: analistaData } = await supabase.auth.signInWithPassword(usuarios.analista);
    analistaId = analistaData.user.id;
    await supabase.auth.signOut();
    
    const { data: jefeData } = await supabase.auth.signInWithPassword(usuarios.jefeSeguridad);
    jefeId = jefeData.user.id;
    await supabase.auth.signOut();
    
    console.log('IDs obtenidos:', { usuarioNormalId, analistaId, jefeId });
  });

  describe('üîí Seguridad de Edge Function "create-and-invite-user"', () => {

    test('‚ùå Usuario NORMAL NO puede crear usuarios', async () => {
      await supabase.auth.signInWithPassword(usuarios.normal);
      
      console.log('Usuario normal intentando crear usuario via edge function...');
      
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session) {
        console.log('‚ùå No hay sesi√≥n activa');
        await supabase.auth.signOut();
        return;
      }
      
      try {
        const response = await fetch(`${process.env.SUPABASE_URL}/functions/v1/create-and-invite-user`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${session.access_token}`,
            'Content-Type': 'application/json',
            'apikey': process.env.SUPABASE_KEY
          },
          body: JSON.stringify({
            email: `test-normal-${Date.now()}@example.com`,
            full_name: 'Usuario de Prueba Normal'
          })
        });

        const result = await response.json();
        
        // Debe fallar con c√≥digo 403
        expect(response.status).toBe(403);
        expect(result.error).toBeDefined();
        expect(result.error).toContain('Acceso denegado');
        
        console.log('‚úÖ Usuario normal correctamente bloqueado');
        console.log('C√≥digo de respuesta:', response.status);
        console.log('Error esperado:', result.error);
        
      } catch (error) {
        console.log('‚ùå Error llamando edge function:', error.message);
        throw error; // Fallar el test si hay problemas de red
      }
      
      await supabase.auth.signOut();
    });

    test('‚ùå ANALISTA NO puede crear usuarios', async () => {
      await supabase.auth.signInWithPassword(usuarios.analista);
      
      console.log('Analista intentando crear usuario via edge function...');
      
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session) {
        console.log('‚ùå No hay sesi√≥n activa');
        await supabase.auth.signOut();
        return;
      }
      
      try {
        const response = await fetch(`${process.env.SUPABASE_URL}/functions/v1/create-and-invite-user`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${session.access_token}`,
            'Content-Type': 'application/json',
            'apikey': process.env.SUPABASE_KEY
          },
          body: JSON.stringify({
            email: `test-analista-${Date.now()}@example.com`,
            full_name: 'Usuario de Prueba Analista'
          })
        });

        const result = await response.json();
        
        // Debe fallar con c√≥digo 403
        expect(response.status).toBe(403);
        expect(result.error).toBeDefined();
        expect(result.error).toContain('Acceso denegado');
        
        console.log('‚úÖ Analista correctamente bloqueado');
        console.log('C√≥digo de respuesta:', response.status);
        console.log('Error esperado:', result.error);
        
      } catch (error) {
        console.log('‚ùå Error llamando edge function:', error.message);
        throw error; // Fallar el test si hay problemas de red
      }
      
      await supabase.auth.signOut();
    });

    test('‚ùå Usuario NO AUTENTICADO NO puede crear usuarios', async () => {
      await supabase.auth.signOut();
      
      console.log('Usuario no autenticado intentando crear usuario via edge function...');
      
      try {
        const response = await fetch(`${process.env.SUPABASE_URL}/functions/v1/create-and-invite-user`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'apikey': process.env.SUPABASE_KEY,
            'Authorization': `Bearer ${session.access_token}`
          },
          body: JSON.stringify({
            email: `test-noauth-${Date.now()}@example.com`,
            full_name: 'Usuario de Prueba No Auth'
          })
        });

        const result = await response.json();
        
        console.log('üìã Respuesta para usuario no autenticado:');
        console.log('  C√≥digo:', response.status);
        console.log('  Respuesta:', result);
        
        // Debe fallar con c√≥digo 403 o 401
        expect([401, 403]).toContain(response.status);
        
        // Verificar que hay error, puede estar en diferentes formatos
        if (result.error) {
          expect(result.error).toBeDefined();
        } else if (result.message) {
          expect(result.message).toBeDefined();
        } else {
          // Si no hay error espec√≠fico, al menos verificar que no es 200
          expect(response.status).not.toBe(200);
        }
        
        console.log('‚úÖ Usuario no autenticado correctamente bloqueado');
        console.log('C√≥digo de respuesta:', response.status);
        console.log('Error esperado:', result.error);
        
      } catch (error) {
        console.log('‚ùå Error llamando edge function:', error.message);
        throw error; // Fallar el test si hay problemas de red
      }
    });

    test('‚úÖ JEFE DE SEGURIDAD S√ç puede crear usuarios', async () => {
      await supabase.auth.signInWithPassword(usuarios.jefeSeguridad);
      
      console.log('Jefe de seguridad creando usuario via edge function...');
      
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session) {
        console.log('‚ùå No hay sesi√≥n activa para jefe de seguridad');
        await supabase.auth.signOut();
        return;
      }
      
      try {
        const testEmail = `test-jefe-${Date.now()}@example.com`;
        const testFullName = 'Usuario Creado por Jefe de Seguridad';
        
        const response = await fetch(`${process.env.SUPABASE_URL}/functions/v1/create-and-invite-user`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${session.access_token}`,
            'Content-Type': 'application/json',
            'apikey': process.env.SUPABASE_KEY
          },
          body: JSON.stringify({
            email: testEmail,
            full_name: testFullName
          })
        });

        const result = await response.json();
        
        console.log('üìã Respuesta de la edge function:');
        console.log('  C√≥digo:', response.status);
        console.log('  Respuesta:', result);
        
        // Verificar si la funci√≥n est√° funcionando correctamente
        if (response.status === 200) {
          // Funci√≥n exitosa
          expect(result.message).toBeDefined();
          console.log('‚úÖ Jefe de seguridad cre√≥ usuario exitosamente');
          console.log('  Mensaje de √©xito:', result.message);
          console.log('  Email del usuario creado:', testEmail);
          console.log('  Nombre completo:', testFullName);
        } else {
          // La funci√≥n debe responder 200 para el jefe de seguridad
          console.log('‚ùå Error inesperado en edge function para jefe de seguridad');
          console.log('  C√≥digo:', response.status);
          console.log('  Error:', result.error || result);
          
          // Fallar el test porque el jefe de seguridad S√ç debe poder crear usuarios
          expect(response.status).toBe(200);
        }
        
      } catch (error) {
        console.log('‚ùå Error llamando edge function:', error.message);
        throw error; // Fallar el test si hay problemas de red
      }
      
      await supabase.auth.signOut();
    });

  });

  describe('üß™ Validaci√≥n de par√°metros de Edge Function', () => {

    test('‚ùå JEFE DE SEGURIDAD: funci√≥n rechaza email inv√°lido', async () => {
      await supabase.auth.signInWithPassword(usuarios.jefeSeguridad);
      
      console.log('Jefe probando crear usuario con email inv√°lido...');
      
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session) {
        console.log('‚ùå No hay sesi√≥n activa');
        await supabase.auth.signOut();
        return;
      }
      
      try {
        const response = await fetch(`${process.env.SUPABASE_URL}/functions/v1/create-and-invite-user`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${session.access_token}`,
            'Content-Type': 'application/json',
            'apikey': process.env.SUPABASE_KEY
          },
          body: JSON.stringify({
            email: 'email-invalido-sin-arroba',
            full_name: 'Usuario de Prueba'
          })
        });

        const result = await response.json();
        
        // Debe fallar por email inv√°lido
        expect(response.status).not.toBe(200);
        expect(result.error).toBeDefined();
        
        console.log('‚úÖ Funci√≥n rechaza email inv√°lido correctamente');
        console.log('C√≥digo de respuesta:', response.status);
        console.log('Error esperado:', result.error);
        
      } catch (error) {
        console.log('‚ùå Error llamando edge function:', error.message);
        throw error; // Fallar el test si hay problemas de red
      }
      
      await supabase.auth.signOut();
    });

    test('‚ùå JEFE DE SEGURIDAD: funci√≥n rechaza datos faltantes', async () => {
      await supabase.auth.signInWithPassword(usuarios.jefeSeguridad);
      
      console.log('Jefe probando crear usuario sin full_name...');
      
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session) {
        console.log('‚ùå No hay sesi√≥n activa');
        await supabase.auth.signOut();
        return;
      }
      
      try {
        const response = await fetch(`${process.env.SUPABASE_URL}/functions/v1/create-and-invite-user`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${session.access_token}`,
            'Content-Type': 'application/json',
            'apikey': process.env.SUPABASE_KEY
          },
          body: JSON.stringify({
            email: `test-incomplete-${Date.now()}@example.com`
            // full_name faltante
          })
        });

        const result = await response.json();
        
        // Debe fallar por datos faltantes
        expect(response.status).not.toBe(200);
        expect(result.error).toBeDefined();
        
        console.log('‚úÖ Funci√≥n rechaza datos incompletos correctamente');
        console.log('C√≥digo de respuesta:', response.status);
        console.log('Error esperado:', result.error);
        
      } catch (error) {
        console.log('‚ùå Error llamando edge function:', error.message);
        throw error; // Fallar el test si hay problemas de red
      }
      
      await supabase.auth.signOut();
    });

  });

  describe('üìä Resumen de Edge Function Security', () => {
    
    test('üîí Verificaci√≥n completa de seguridad de Edge Function', () => {
      console.log('\nüõ°Ô∏è === SEGURIDAD EDGE FUNCTION VERIFICADA ===');
      console.log('');
      console.log('üîê Funci√≥n: "create-and-invite-user"');
      console.log('  üìç Endpoint: /functions/v1/create-and-invite-user');
      console.log('  üéØ Prop√≥sito: Crear usuarios autenticados en el sistema');
      console.log('');
      console.log('üö´ RESTRICCIONES DE ACCESO:');
      console.log('  ‚ùå Usuario normal no puede crear usuarios');
      console.log('  ‚ùå Analista no puede crear usuarios');
      console.log('  ‚ùå Usuario no autenticado no puede crear usuarios');
      console.log('  ‚úÖ Solo jefe de seguridad puede crear usuarios');
      console.log('');
      console.log('üîç VALIDACIONES IMPLEMENTADAS:');
      console.log('  ‚úÖ Verificaci√≥n de rol desde tabla profiles');
      console.log('  ‚úÖ Validaci√≥n de autenticaci√≥n requerida');
      console.log('  ‚úÖ Control de acceso basado en rol espec√≠fico');
      console.log('  ‚úÖ Validaci√≥n de par√°metros de entrada');
      console.log('');
      console.log('üõ†Ô∏è TECNOLOG√çAS UTILIZADAS:');
      console.log('  ‚Ä¢ Supabase Edge Functions (Deno)');
      console.log('  ‚Ä¢ Supabase Auth & RLS');
      console.log('  ‚Ä¢ Admin API para crear usuarios');
      console.log('  ‚Ä¢ Headers CORS configurados');
      console.log('');
      console.log('üéØ RESULTADO: SEGURIDAD IMPLEMENTADA CORRECTAMENTE');
      console.log('===============================================\n');
      
      expect(true).toBe(true);
    });

  });

});
